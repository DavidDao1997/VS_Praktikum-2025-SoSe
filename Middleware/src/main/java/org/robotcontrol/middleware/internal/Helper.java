package org.robotcontrol.middleware.internal;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Helper {

    /**
     * Converts an array of robot identifiers (e.g., ["R1", "R7", ...]) into a 4-byte bitmap.
     * @param robots array of strings in the format "R<id>"
     * @return a 4-byte array where each bit corresponds to one robot ID
     */
    public static byte[] convertStringArrayToBitmap256(String[] robots) {
        byte[] bitArray = new byte[32];

        for (String robot : robots) {
            if (!robot.isEmpty()) {
                Integer robotId = extractIntAfterR(robot);
                if (robotId != null && robotId > 0) {
                    int bitIndex = robotId - 1;
                    int byteIndex = bitIndex / 8;
                    int bitInByte = bitIndex % 8;

                    bitArray[byteIndex] ^= (1 << (7 - bitInByte));
                }
            }
        }
        return bitArray;
    }

    /**
     * Converts a 4-byte bitmap back into an array of robot identifiers (e.g., ["R1", "R7", ...]).
     * @param bitArray 4-byte bitmap generated by convertStringArrayToBitmap256
     * @return array of strings in the format "R<id>"
     */
    public static String[] convertBitmap256ToStringArray(byte[] bitArray) {
        if (bitArray == null || bitArray.length != 32) {
            throw new IllegalArgumentException("Bitmap must be a 32-byte array");
        }

        List<String> robots = new ArrayList<>();
        for (int byteIndex = 0; byteIndex < bitArray.length; byteIndex++) {
            for (int bitInByte = 0; bitInByte < 8; bitInByte++) {
                int mask = 1 << (7 - bitInByte);
                if ((bitArray[byteIndex] & mask) != 0) {
                    int robotId = byteIndex * 8 + bitInByte + 1;
                    robots.add("R" + robotId);
                }
            }
        }
        return robots.toArray(new String[0]);
    }

    /**
     * Extracts the integer following an 'R' in the input string.
     * Matches patterns like "R12" or "R34A".
     * @param input input string to parse
     * @return integer after 'R', or null if no match
     */
    public static Integer extractIntAfterR(String input) {
        Pattern pattern = Pattern.compile("R(\\d+)(A|\\b)");
        Matcher matcher = pattern.matcher(input);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(1));
        }
        return null;
    }
}
